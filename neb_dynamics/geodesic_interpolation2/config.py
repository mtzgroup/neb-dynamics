"""
Default configuration parameters for the MorseGeodesic Interpolation package.

This file centralizes default values for various parameters used throughout the
package. Modifying values here will change the default behavior of the tools
without needing to alter the core code. This promotes easier customization and
ensures consistency across different modules.
"""

from typing import Dict, Any
import logging


# --- Main Script Defaults ---
# These parameters control the overall behavior of the command-line tool
# (`__main__.py`) for path interpolation and smoothing.
MAIN_DEFAULTS: Dict[str, Any] = {

    "nimages": 17,                  # Target number of images (frames or geometries) in the final, processed path.

    "output_filename": "interpolated.xyz",  # Default filename for the output XYZ file containing the smoothed path.

    "tolerance": 2e-3,              # Convergence criterion for the path optimization process.
                                    # Based on the infinity norm of the gradient of the path length (|dL|_inf).
                                    # Optimization stops when this value falls below the tolerance.

    "max_iterations": 15,           # Maximum number of function evaluations allowed for the
                                    # SciPy least-squares optimizer during path smoothing.

    "morse_alpha": 1.7,             # Default 'alpha' parameter for the Morse potential-like scaler.
                                    # This controls the "stiffness" or "width" of the potential well
                                    # used in scaling internal coordinates.

    "morse_beta": 0.01,             # Default 'beta' parameter for the Morse potential-like scaler.
                                    # This controls the contribution of the inverse term in the scaling function.

    "friction": 1e-2,               # Base coefficient for the friction term, used for regularization
                                    # during the optimization. A small positive value can help stabilize
                                    # the optimization process and prevent overly large deviations.

    "distance_cutoff": 3.0,         # Cut-off distance (in Angstroms) for including atom pairs in the
                                    # initial list of internal coordinates (rij_list) generated by
                                    # `get_bond_list` within the `MorseGeodesic` class.

    "logging_level": "INFO",        # Default logging level for console output.
                                    # Options: "DEBUG", "INFO", "WARNING", "ERROR".

    "save_raw_filename": None,      # Optional. If a filename is provided (e.g., "raw_path.xyz"),
                                    # the path after redistribution (but before smoothing) will be saved.
                                    # Default is None, meaning the raw path is not saved.
}


# --- Interpolation Defaults ---
# These parameters are specific to the `interpolation.py` module, particularly
# for the internal `_MidpointFinder` class, which fine-tunes how midpoints
# between geometries are found.
INTERPOLATION_DEFAULTS: Dict[str, Any] = {

    "midpoint_tolerance_factor": 5.0, # Factor by which the main optimization tolerance (`MAIN_DEFAULTS["tolerance"]`)
                                      # is multiplied to get the tolerance for midpoint finding steps.
                                      # A larger factor means a looser tolerance for midpoint searches.

    "midpoint_nudge": 0.01,           # Magnitude of the random displacement (nudge) applied to
                                      # initial guesses during the midpoint finding process to help
                                      # escape local minima.

    "midpoint_threshold": 4.0,        # Base distance threshold (in Angstroms) used by `get_bond_list`
                                      # within the `_MidpointFinder` to define its internal coordinate set.

    "midpoint_morse_alpha": 0.7,      # Specific Morse 'alpha' parameter for the scaler used during the
                                      # initial least-squares search for an unrefined midpoint.

    "midpoint_morse_beta": 0.01,      # Specific Morse 'beta' parameter for the scaler used during the
                                      # initial least-squares search for an unrefined midpoint.

    "midpoint_friction": 1.0,         # Friction coefficient used during the local 3-point geodesic
                                      # evaluation step within `_MidpointFinder`.

    "midpoint_ls_friction_factor": 0.1, # Factor for the friction term in the least-squares optimization
                                        # step within `_MidpointFinder`.

    "midpoint_gbl_threshold_factor": 1.0, # Additive factor to `midpoint_threshold` when `get_bond_list`
                                          # is called during the LS preparation step in `_MidpointFinder`.
                                          # Allows for a slightly different threshold for this specific call.

    "midpoint_gbl_min_neighbors_extras": 0,  # `min_neighbors` parameter for `get_bond_list` when checking
                                             # for "extra" (newly relevant) internal coordinates in `_MidpointFinder`.

    "midpoint_morse_alpha_refine": 1.7, # Morse 'alpha' parameter used for the local 3-point geodesic
                                       # evaluation step (`_evaluate_midpoint_candidate_locally`).

    "midpoint_min_neighbors_ls_prep": 4,  # `min_neighbors` parameter for `get_bond_list` during the
                                          # LS preparation step (`_prepare_for_least_squares_step`) in `_MidpointFinder`.

    "midpoint_initial_guess_coeffs": [0.02, 0.98], # Coefficients used to generate initial guesses for the
                                                   # midpoint search. For endpoints G1 and G2, guesses are
                                                   # generated near G1 (coeff * G1 + (1-coeff) * G2) and near G2.
}


# --- Coordinate Utilities Defaults ---
# These parameters are specific to the `coord_utils.py` module, controlling
# aspects of geometry alignment and internal coordinate generation.
COORD_UTILS_DEFAULTS: Dict[str, Any] = {

    "get_bond_list_threshold": 3.0,     # Default distance threshold (in Angstroms) for including atom pairs
                                        # when `get_bond_list` is called (e.g., by `MorseGeodesic` init).

    "get_bond_list_min_neighbors": 4,   # Default minimum number of "neighbor" pairs an atom should have
                                        # in the list generated by `get_bond_list`. If an atom has fewer,
                                        # additional pairs will be added based on proximity.

    "get_bond_list_snapshots": 30,      # Maximum number of geometry snapshots (frames from a path)
                                        # to sample when `get_bond_list` determines the internal coordinates.
                                        # Considers first, last, and a random subset of interior frames.

    "get_bond_list_bond_threshold": 1.8, # Distance threshold (in Angstroms) for defining "bonded" pairs
                                         # during the neighbor-of-neighbor search within `get_bond_list`.
                                         # This is typically tighter than `get_bond_list_threshold`.

    "default_atomic_radius": 1.5,       # Fallback atomic radius (in Angstroms) used if an element symbol
                                        # is not found in the `ATOMIC_RADIUS` dictionary.

    "default_eq_distance": 2.0,         # Default equilibrium distance (in Angstroms) for an atom pair
                                        # if atom types are not provided to `get_bond_list` or if radii
                                        # cannot be determined.

    "kabsch_svd_reflection_threshold": -1e-9, # Threshold for the determinant of the rotation matrix in the
                                             # Kabsch alignment algorithm. If the determinant is below this
                                             # (i.e., negative), a reflection is suspected and corrected.

    "rij_norm_epsilon": 1e-9,           # A small epsilon value used to prevent division by zero when
                                        # normalizing distance vectors (e.g., in `compute_rij`).

    "scaler_epsilon": 1e-12,            # A small epsilon value used in scaler functions (e.g., `morse_scaler`)
                                        # to ensure numerical stability, for instance, by preventing
                                        # division by zero or taking logarithms of non-positive numbers.
}


# --- Atomic Radii ---
# Dictionary of atomic radii (in Angstroms).
# Used by `coord_utils.get_bond_list` to estimate default equilibrium bond
# distances when atom symbols are provided. These are covalent radii.
ATOMIC_RADIUS: Dict[str, float] = dict(
    H=0.31,  He=0.28,
    Li=1.28, Be=0.96, B=0.84,  C=0.76,  N=0.71,  O=0.66,  F=0.57,  Ne=0.58,
    Na=1.66, Mg=1.41, Al=1.21, Si=1.11, P=1.07,  S=1.05,  Cl=1.02, Ar=1.06
    # Additional elements can be added here as needed for specific use cases.
)


# --- Logging Configuration ---
# Defines available logging levels and the standard format for log messages
# used throughout the package.
LOGGING_LEVELS: Dict[str, int] = {
    "DEBUG": logging.DEBUG,
    "INFO": logging.INFO,
    "WARNING": logging.WARNING,
    "ERROR": logging.ERROR,
}

LOGGING_FORMAT: str = "[%(module)-13s::%(funcName)-20s] %(message)s"

